server:
  port: 8082

spring:
  application:
    name: transaction-service
  config:
    import: optional:file:.env[.properties]
  
  # DSQL 사용을 위한 JPA 설정
  datasource:
    url: # DSQL DataSource를 직접 사용하므로 비워둠
    driver-class-name: org.postgresql.Driver
  
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        default_schema: stock_trading
    show-sql: true
  
  liquibase:
    enabled: false

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  packages-to-scan: com.KimStock.adapter.in.web
  default-consumes-media-type: application/json
  default-produces-media-type: application/json

kiwoom:
  api:
    app-key: ${KIWOOM_API_APP_KEY:}
    app-secret: ${KIWOOM_API_APP_SECRET:}
    base-url: https://api.kiwoom.com
    mock-base-url: https://mockapi.kiwoom.com
  websocket:
    url: wss://api.kiwoom.com:10000/api/dostk/websocket

# DSQL 설정
app:
  datasource:
    dsql:
      endpoint: ${DSQL_ENDPOINT:3iabuhgpuyweeglhfr73mskaoq.dsql.ap-northeast-2.on.aws}
      user: ${DSQL_USER:admin}
      database: ${DSQL_DATABASE:postgres}
      region: ${DSQL_REGION:ap-northeast-2}

env:
  file:
    directory: ./stock-service/

logging:
  level:
    org.springframework.r2dbc: ERROR
    org.springframework.sql.init: DEBUG
    com.KimStock.config.DsqlConfig: DEBUG
    com.KimStock.application.service.DsqlTestService: DEBUG
