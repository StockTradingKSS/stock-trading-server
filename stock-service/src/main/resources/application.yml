server:
  port: 8082

spring:
  application:
    name: transaction-service
  config:
    import: optional:file:.env[.properties]
  # JPA 설정 (Aurora DSQL용)
  jpa:
    hibernate:
      ddl-auto: none # DDL 비활성화로 연결 테스트
    show-sql: false
    properties:
      hibernate:
        dialect: software.amazon.dsql.hibernate.dialect.AuroraDSQLDialect
        format_sql: true
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
    database-platform: software.amazon.dsql.hibernate.dialect.AuroraDSQLDialect
    open-in-view: false
  sql:
    init:
      mode: never
  liquibase:
    enabled: false

# AWS DSQL 설정
aws:
  access-key-id: ${AWS_ACCESS_KEY_ID:YOUR_ACCESS_KEY}
  secret-access-key: ${AWS_SECRET_ACCESS_KEY:YOUR_SECRET_KEY}
  dsql:
    endpoint: ${DSQL_ENDPOINT:3iabuhgpuyweeglhfr73mskaoq.dsql.ap-northeast-2.on.aws}
    user: ${DSQL_USER:admin}
    database: ${DSQL_DATABASE:postgres}
    region: ${DSQL_REGION:ap-northeast-2}

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  packages-to-scan: com.KimStock.adapter.in.web
  default-consumes-media-type: application/json
  default-produces-media-type: application/json

kiwoom:
  api:
    app-key: ${KIWOOM_API_APP_KEY:}
    app-secret: ${KIWOOM_API_APP_SECRET:}
    base-url: https://api.kiwoom.com
    mock-base-url: https://mockapi.kiwoom.com
  websocket:
    url: wss://api.kiwoom.com:10000/api/dostk/websocket

env:
  file:
    directory: ./stock-service/

logging:
  level:
    com.KimStock.adapter.out.persistence.config: DEBUG
    com.zaxxer.hikari: DEBUG
    org.springframework.sql.init: DEBUG
    org.hibernate.SQL: ERROR
    org.postgresql: DEBUG
